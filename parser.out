Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    BEGIN
    BIGGEST
    BIGGESTEQUAL
    BIGSMALLERESQUAL
    BREAK
    CLASS
    CLOSEKEY
    COMMENT
    DEDENT
    DIFF
    DIVIDE
    DOUBLEBAR
    DOUBLEE
    DOUBLEEQUAL
    EXCLAMATION
    EXPONEN
    FALSE
    IDENT
    LINHA
    LSHIFT
    MINUS
    MODULE
    NIL
    NOT
    OPENKEY
    OR
    PONTO
    PONTOEVIRGULA
    REST
    RSHIFT
    SELF
    SIMPLEBAR
    SIMPLEE
    SMALL
    SMALLEQUAL
    SUPER
    TIMES
    TRIPLEEQUAL
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> funcao program
Rule 2     program -> assign program
Rule 3     program -> assign BREAKLINE
Rule 4     program -> funcao
Rule 5     funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE body
Rule 6     funcao -> DEF ID BREAKLINE body
Rule 7     stms -> stm
Rule 8     stms -> stm stms
Rule 9     opcional -> ELSIF exp THEN body
Rule 10    opcional -> ELSE stms END
Rule 11    opcional -> <empty>
Rule 12    opcional -> ELSIF exp THEN body opcional
Rule 13    body -> stms END
Rule 14    stm -> exp BREAKLINE
Rule 15    stm -> WHILE LPAREN exp RPAREN BREAKLINE body
Rule 16    stm -> WHILE exp BREAKLINE body
Rule 17    stm -> FOR ID IN exp DO BREAKLINE body
Rule 18    stm -> FOR ID IN exp BREAKLINE body
Rule 19    stm -> IF exp THEN BREAKLINE body opcional
Rule 20    stm -> IF exp BREAKLINE body opcional
Rule 21    stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional
Rule 22    stm -> IF LPAREN exp RPAREN BREAKLINE body opcional
Rule 23    stm -> RETURN exp BREAKLINE
Rule 24    stm -> RETURN BREAKLINE
Rule 25    exp -> exp PLUS exp
Rule 26    exp -> call
Rule 27    exp -> assign
Rule 28    exp -> NUMBER
Rule 29    call -> ID LPAREN sigParams RPAREN
Rule 30    call -> ID LPAREN RPAREN
Rule 31    call -> ID
Rule 32    call -> ID sigParams
Rule 33    sigParams -> exp
Rule 34    sigParams -> exp VIRGULA sigParams
Rule 35    assign -> ID EQUAL exp
Rule 36    assign -> assign BREAKLINE
Rule 37    stm -> assign BREAKLINE

Terminals, with rules where they appear

AND                  : 
BEGIN                : 
BIGGEST              : 
BIGGESTEQUAL         : 
BIGSMALLERESQUAL     : 
BREAK                : 
BREAKLINE            : 3 5 6 14 15 16 17 18 19 20 21 22 23 24 36 37
CLASS                : 
CLOSEKEY             : 
COMMENT              : 
DEDENT               : 
DEF                  : 5 6
DIFF                 : 
DIVIDE               : 
DO                   : 17
DOUBLEBAR            : 
DOUBLEE              : 
DOUBLEEQUAL          : 
ELSE                 : 10
ELSIF                : 9 12
END                  : 10 13
EQUAL                : 35
EXCLAMATION          : 
EXPONEN              : 
FALSE                : 
FOR                  : 17 18
ID                   : 5 6 17 18 29 30 31 32 35
IDENT                : 
IF                   : 19 20 21 22
IN                   : 17 18
LINHA                : 
LPAREN               : 5 15 21 22 29 30
LSHIFT               : 
MINUS                : 
MODULE               : 
NIL                  : 
NOT                  : 
NUMBER               : 28
OPENKEY              : 
OR                   : 
PLUS                 : 25
PONTO                : 
PONTOEVIRGULA        : 
REST                 : 
RETURN               : 23 24
RPAREN               : 5 15 21 22 29 30
RSHIFT               : 
SELF                 : 
SIMPLEBAR            : 
SIMPLEE              : 
SMALL                : 
SMALLEQUAL           : 
SUPER                : 
THEN                 : 9 12 19 21
TIMES                : 
TRIPLEEQUAL          : 
TRUE                 : 
VIRGULA              : 34
WHILE                : 15 16
error                : 

Nonterminals, with rules where they appear

assign               : 2 3 27 36 37
body                 : 5 6 9 12 15 16 17 18 19 20 21 22
call                 : 26
exp                  : 9 12 14 15 16 17 18 19 20 21 22 23 25 25 33 34 35
funcao               : 1 4
opcional             : 12 19 20 21 22
program              : 1 2 0
sigParams            : 5 29 32 34
stm                  : 7 8
stms                 : 8 10 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . funcao program
    (2) program -> . assign program
    (3) program -> . assign BREAKLINE
    (4) program -> . funcao
    (5) funcao -> . DEF ID LPAREN sigParams RPAREN BREAKLINE body
    (6) funcao -> . DEF ID BREAKLINE body
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    DEF             shift and go to state 4
    ID              shift and go to state 5

    program                        shift and go to state 1
    funcao                         shift and go to state 2
    assign                         shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (1) program -> funcao . program
    (4) program -> funcao .
    (1) program -> . funcao program
    (2) program -> . assign program
    (3) program -> . assign BREAKLINE
    (4) program -> . funcao
    (5) funcao -> . DEF ID LPAREN sigParams RPAREN BREAKLINE body
    (6) funcao -> . DEF ID BREAKLINE body
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    $end            reduce using rule 4 (program -> funcao .)
    DEF             shift and go to state 4
    ID              shift and go to state 5

    funcao                         shift and go to state 2
    program                        shift and go to state 6
    assign                         shift and go to state 3

state 3

    (2) program -> assign . program
    (3) program -> assign . BREAKLINE
    (36) assign -> assign . BREAKLINE
    (1) program -> . funcao program
    (2) program -> . assign program
    (3) program -> . assign BREAKLINE
    (4) program -> . funcao
    (5) funcao -> . DEF ID LPAREN sigParams RPAREN BREAKLINE body
    (6) funcao -> . DEF ID BREAKLINE body
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    BREAKLINE       shift and go to state 8
    DEF             shift and go to state 4
    ID              shift and go to state 5

    assign                         shift and go to state 3
    program                        shift and go to state 7
    funcao                         shift and go to state 2

state 4

    (5) funcao -> DEF . ID LPAREN sigParams RPAREN BREAKLINE body
    (6) funcao -> DEF . ID BREAKLINE body

    ID              shift and go to state 9


state 5

    (35) assign -> ID . EQUAL exp

    EQUAL           shift and go to state 10


state 6

    (1) program -> funcao program .

    $end            reduce using rule 1 (program -> funcao program .)


state 7

    (2) program -> assign program .

    $end            reduce using rule 2 (program -> assign program .)


state 8

    (3) program -> assign BREAKLINE .
    (36) assign -> assign BREAKLINE .

    $end            reduce using rule 3 (program -> assign BREAKLINE .)
    BREAKLINE       reduce using rule 36 (assign -> assign BREAKLINE .)
    DEF             reduce using rule 36 (assign -> assign BREAKLINE .)
    ID              reduce using rule 36 (assign -> assign BREAKLINE .)


state 9

    (5) funcao -> DEF ID . LPAREN sigParams RPAREN BREAKLINE body
    (6) funcao -> DEF ID . BREAKLINE body

    LPAREN          shift and go to state 11
    BREAKLINE       shift and go to state 12


state 10

    (35) assign -> ID EQUAL . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 14
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 11

    (5) funcao -> DEF ID LPAREN . sigParams RPAREN BREAKLINE body
    (33) sigParams -> . exp
    (34) sigParams -> . exp VIRGULA sigParams
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    sigParams                      shift and go to state 18
    exp                            shift and go to state 19
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 12

    (6) funcao -> DEF ID BREAKLINE . body
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    body                           shift and go to state 21
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    exp                            shift and go to state 24
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 13

    (29) call -> ID . LPAREN sigParams RPAREN
    (30) call -> ID . LPAREN RPAREN
    (31) call -> ID .
    (32) call -> ID . sigParams
    (35) assign -> ID . EQUAL exp
    (33) sigParams -> . exp
    (34) sigParams -> . exp VIRGULA sigParams
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    LPAREN          shift and go to state 30
    PLUS            reduce using rule 31 (call -> ID .)
    BREAKLINE       reduce using rule 31 (call -> ID .)
    DEF             reduce using rule 31 (call -> ID .)
    ID              reduce using rule 31 (call -> ID .)
    VIRGULA         reduce using rule 31 (call -> ID .)
    RPAREN          reduce using rule 31 (call -> ID .)
    THEN            reduce using rule 31 (call -> ID .)
    DO              reduce using rule 31 (call -> ID .)
    EQUAL           shift and go to state 10
    NUMBER          shift and go to state 17

  ! ID              [ shift and go to state 13 ]

    sigParams                      shift and go to state 31
    exp                            shift and go to state 19
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 14

    (35) assign -> ID EQUAL exp .
    (25) exp -> exp . PLUS exp

    BREAKLINE       reduce using rule 35 (assign -> ID EQUAL exp .)
    DEF             reduce using rule 35 (assign -> ID EQUAL exp .)
    ID              reduce using rule 35 (assign -> ID EQUAL exp .)
    VIRGULA         reduce using rule 35 (assign -> ID EQUAL exp .)
    RPAREN          reduce using rule 35 (assign -> ID EQUAL exp .)
    THEN            reduce using rule 35 (assign -> ID EQUAL exp .)
    DO              reduce using rule 35 (assign -> ID EQUAL exp .)
    PLUS            shift and go to state 32

  ! PLUS            [ reduce using rule 35 (assign -> ID EQUAL exp .) ]


state 15

    (26) exp -> call .

    PLUS            reduce using rule 26 (exp -> call .)
    BREAKLINE       reduce using rule 26 (exp -> call .)
    DEF             reduce using rule 26 (exp -> call .)
    ID              reduce using rule 26 (exp -> call .)
    VIRGULA         reduce using rule 26 (exp -> call .)
    RPAREN          reduce using rule 26 (exp -> call .)
    THEN            reduce using rule 26 (exp -> call .)
    DO              reduce using rule 26 (exp -> call .)


state 16

    (27) exp -> assign .
    (36) assign -> assign . BREAKLINE

  ! shift/reduce conflict for BREAKLINE resolved as shift
    PLUS            reduce using rule 27 (exp -> assign .)
    DEF             reduce using rule 27 (exp -> assign .)
    ID              reduce using rule 27 (exp -> assign .)
    VIRGULA         reduce using rule 27 (exp -> assign .)
    RPAREN          reduce using rule 27 (exp -> assign .)
    THEN            reduce using rule 27 (exp -> assign .)
    DO              reduce using rule 27 (exp -> assign .)
    BREAKLINE       shift and go to state 33

  ! BREAKLINE       [ reduce using rule 27 (exp -> assign .) ]


state 17

    (28) exp -> NUMBER .

    PLUS            reduce using rule 28 (exp -> NUMBER .)
    BREAKLINE       reduce using rule 28 (exp -> NUMBER .)
    DEF             reduce using rule 28 (exp -> NUMBER .)
    ID              reduce using rule 28 (exp -> NUMBER .)
    VIRGULA         reduce using rule 28 (exp -> NUMBER .)
    RPAREN          reduce using rule 28 (exp -> NUMBER .)
    THEN            reduce using rule 28 (exp -> NUMBER .)
    DO              reduce using rule 28 (exp -> NUMBER .)


state 18

    (5) funcao -> DEF ID LPAREN sigParams . RPAREN BREAKLINE body

    RPAREN          shift and go to state 34


state 19

    (33) sigParams -> exp .
    (34) sigParams -> exp . VIRGULA sigParams
    (25) exp -> exp . PLUS exp

  ! shift/reduce conflict for VIRGULA resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    RPAREN          reduce using rule 33 (sigParams -> exp .)
    BREAKLINE       reduce using rule 33 (sigParams -> exp .)
    DEF             reduce using rule 33 (sigParams -> exp .)
    ID              reduce using rule 33 (sigParams -> exp .)
    THEN            reduce using rule 33 (sigParams -> exp .)
    DO              reduce using rule 33 (sigParams -> exp .)
    VIRGULA         shift and go to state 35
    PLUS            shift and go to state 32

  ! PLUS            [ reduce using rule 33 (sigParams -> exp .) ]
  ! VIRGULA         [ reduce using rule 33 (sigParams -> exp .) ]


state 20

    (35) assign -> ID . EQUAL exp
    (29) call -> ID . LPAREN sigParams RPAREN
    (30) call -> ID . LPAREN RPAREN
    (31) call -> ID .
    (32) call -> ID . sigParams
    (33) sigParams -> . exp
    (34) sigParams -> . exp VIRGULA sigParams
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    EQUAL           shift and go to state 10
    LPAREN          shift and go to state 30
    BREAKLINE       reduce using rule 31 (call -> ID .)
    PLUS            reduce using rule 31 (call -> ID .)
    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 19
    sigParams                      shift and go to state 31
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 21

    (6) funcao -> DEF ID BREAKLINE body .

    DEF             reduce using rule 6 (funcao -> DEF ID BREAKLINE body .)
    ID              reduce using rule 6 (funcao -> DEF ID BREAKLINE body .)
    $end            reduce using rule 6 (funcao -> DEF ID BREAKLINE body .)


state 22

    (13) body -> stms . END

    END             shift and go to state 36


state 23

    (7) stms -> stm .
    (8) stms -> stm . stms
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    END             reduce using rule 7 (stms -> stm .)
    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    stm                            shift and go to state 23
    stms                           shift and go to state 37
    exp                            shift and go to state 24
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 24

    (14) stm -> exp . BREAKLINE
    (25) exp -> exp . PLUS exp

    BREAKLINE       shift and go to state 38
    PLUS            shift and go to state 32


state 25

    (15) stm -> WHILE . LPAREN exp RPAREN BREAKLINE body
    (16) stm -> WHILE . exp BREAKLINE body
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    LPAREN          shift and go to state 39
    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 40
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 26

    (17) stm -> FOR . ID IN exp DO BREAKLINE body
    (18) stm -> FOR . ID IN exp BREAKLINE body

    ID              shift and go to state 41


state 27

    (19) stm -> IF . exp THEN BREAKLINE body opcional
    (20) stm -> IF . exp BREAKLINE body opcional
    (21) stm -> IF . LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> IF . LPAREN exp RPAREN BREAKLINE body opcional
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    LPAREN          shift and go to state 43
    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 42
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 28

    (23) stm -> RETURN . exp BREAKLINE
    (24) stm -> RETURN . BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    BREAKLINE       shift and go to state 45
    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 44
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 29

    (37) stm -> assign . BREAKLINE
    (27) exp -> assign .
    (36) assign -> assign . BREAKLINE

  ! shift/reduce conflict for BREAKLINE resolved as shift
    BREAKLINE       shift and go to state 46
    PLUS            reduce using rule 27 (exp -> assign .)

  ! BREAKLINE       [ reduce using rule 27 (exp -> assign .) ]


state 30

    (29) call -> ID LPAREN . sigParams RPAREN
    (30) call -> ID LPAREN . RPAREN
    (33) sigParams -> . exp
    (34) sigParams -> . exp VIRGULA sigParams
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    RPAREN          shift and go to state 48
    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    sigParams                      shift and go to state 47
    exp                            shift and go to state 19
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 31

    (32) call -> ID sigParams .

    PLUS            reduce using rule 32 (call -> ID sigParams .)
    BREAKLINE       reduce using rule 32 (call -> ID sigParams .)
    DEF             reduce using rule 32 (call -> ID sigParams .)
    ID              reduce using rule 32 (call -> ID sigParams .)
    VIRGULA         reduce using rule 32 (call -> ID sigParams .)
    RPAREN          reduce using rule 32 (call -> ID sigParams .)
    THEN            reduce using rule 32 (call -> ID sigParams .)
    DO              reduce using rule 32 (call -> ID sigParams .)


state 32

    (25) exp -> exp PLUS . exp
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 49
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 33

    (36) assign -> assign BREAKLINE .

    PLUS            reduce using rule 36 (assign -> assign BREAKLINE .)
    BREAKLINE       reduce using rule 36 (assign -> assign BREAKLINE .)
    DEF             reduce using rule 36 (assign -> assign BREAKLINE .)
    ID              reduce using rule 36 (assign -> assign BREAKLINE .)
    VIRGULA         reduce using rule 36 (assign -> assign BREAKLINE .)
    RPAREN          reduce using rule 36 (assign -> assign BREAKLINE .)
    THEN            reduce using rule 36 (assign -> assign BREAKLINE .)
    DO              reduce using rule 36 (assign -> assign BREAKLINE .)


state 34

    (5) funcao -> DEF ID LPAREN sigParams RPAREN . BREAKLINE body

    BREAKLINE       shift and go to state 50


state 35

    (34) sigParams -> exp VIRGULA . sigParams
    (33) sigParams -> . exp
    (34) sigParams -> . exp VIRGULA sigParams
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 19
    sigParams                      shift and go to state 51
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 36

    (13) body -> stms END .

    DEF             reduce using rule 13 (body -> stms END .)
    ID              reduce using rule 13 (body -> stms END .)
    $end            reduce using rule 13 (body -> stms END .)
    WHILE           reduce using rule 13 (body -> stms END .)
    FOR             reduce using rule 13 (body -> stms END .)
    IF              reduce using rule 13 (body -> stms END .)
    RETURN          reduce using rule 13 (body -> stms END .)
    NUMBER          reduce using rule 13 (body -> stms END .)
    END             reduce using rule 13 (body -> stms END .)
    ELSIF           reduce using rule 13 (body -> stms END .)
    ELSE            reduce using rule 13 (body -> stms END .)


state 37

    (8) stms -> stm stms .

    END             reduce using rule 8 (stms -> stm stms .)


state 38

    (14) stm -> exp BREAKLINE .

    WHILE           reduce using rule 14 (stm -> exp BREAKLINE .)
    FOR             reduce using rule 14 (stm -> exp BREAKLINE .)
    IF              reduce using rule 14 (stm -> exp BREAKLINE .)
    RETURN          reduce using rule 14 (stm -> exp BREAKLINE .)
    NUMBER          reduce using rule 14 (stm -> exp BREAKLINE .)
    ID              reduce using rule 14 (stm -> exp BREAKLINE .)
    END             reduce using rule 14 (stm -> exp BREAKLINE .)


state 39

    (15) stm -> WHILE LPAREN . exp RPAREN BREAKLINE body
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 52
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 40

    (16) stm -> WHILE exp . BREAKLINE body
    (25) exp -> exp . PLUS exp

    BREAKLINE       shift and go to state 53
    PLUS            shift and go to state 32


state 41

    (17) stm -> FOR ID . IN exp DO BREAKLINE body
    (18) stm -> FOR ID . IN exp BREAKLINE body

    IN              shift and go to state 54


state 42

    (19) stm -> IF exp . THEN BREAKLINE body opcional
    (20) stm -> IF exp . BREAKLINE body opcional
    (25) exp -> exp . PLUS exp

    THEN            shift and go to state 55
    BREAKLINE       shift and go to state 56
    PLUS            shift and go to state 32


state 43

    (21) stm -> IF LPAREN . exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> IF LPAREN . exp RPAREN BREAKLINE body opcional
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 57
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 44

    (23) stm -> RETURN exp . BREAKLINE
    (25) exp -> exp . PLUS exp

    BREAKLINE       shift and go to state 58
    PLUS            shift and go to state 32


state 45

    (24) stm -> RETURN BREAKLINE .

    WHILE           reduce using rule 24 (stm -> RETURN BREAKLINE .)
    FOR             reduce using rule 24 (stm -> RETURN BREAKLINE .)
    IF              reduce using rule 24 (stm -> RETURN BREAKLINE .)
    RETURN          reduce using rule 24 (stm -> RETURN BREAKLINE .)
    NUMBER          reduce using rule 24 (stm -> RETURN BREAKLINE .)
    ID              reduce using rule 24 (stm -> RETURN BREAKLINE .)
    END             reduce using rule 24 (stm -> RETURN BREAKLINE .)


state 46

    (37) stm -> assign BREAKLINE .
    (36) assign -> assign BREAKLINE .

    WHILE           reduce using rule 37 (stm -> assign BREAKLINE .)
    FOR             reduce using rule 37 (stm -> assign BREAKLINE .)
    IF              reduce using rule 37 (stm -> assign BREAKLINE .)
    RETURN          reduce using rule 37 (stm -> assign BREAKLINE .)
    NUMBER          reduce using rule 37 (stm -> assign BREAKLINE .)
    ID              reduce using rule 37 (stm -> assign BREAKLINE .)
    END             reduce using rule 37 (stm -> assign BREAKLINE .)
    BREAKLINE       reduce using rule 36 (assign -> assign BREAKLINE .)
    PLUS            reduce using rule 36 (assign -> assign BREAKLINE .)


state 47

    (29) call -> ID LPAREN sigParams . RPAREN

    RPAREN          shift and go to state 59


state 48

    (30) call -> ID LPAREN RPAREN .

    PLUS            reduce using rule 30 (call -> ID LPAREN RPAREN .)
    BREAKLINE       reduce using rule 30 (call -> ID LPAREN RPAREN .)
    DEF             reduce using rule 30 (call -> ID LPAREN RPAREN .)
    ID              reduce using rule 30 (call -> ID LPAREN RPAREN .)
    VIRGULA         reduce using rule 30 (call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 30 (call -> ID LPAREN RPAREN .)
    THEN            reduce using rule 30 (call -> ID LPAREN RPAREN .)
    DO              reduce using rule 30 (call -> ID LPAREN RPAREN .)


state 49

    (25) exp -> exp PLUS exp .
    (25) exp -> exp . PLUS exp

    PLUS            reduce using rule 25 (exp -> exp PLUS exp .)
    BREAKLINE       reduce using rule 25 (exp -> exp PLUS exp .)
    DEF             reduce using rule 25 (exp -> exp PLUS exp .)
    ID              reduce using rule 25 (exp -> exp PLUS exp .)
    VIRGULA         reduce using rule 25 (exp -> exp PLUS exp .)
    RPAREN          reduce using rule 25 (exp -> exp PLUS exp .)
    THEN            reduce using rule 25 (exp -> exp PLUS exp .)
    DO              reduce using rule 25 (exp -> exp PLUS exp .)

  ! PLUS            [ shift and go to state 32 ]


state 50

    (5) funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE . body
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    body                           shift and go to state 60
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    exp                            shift and go to state 24
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 51

    (34) sigParams -> exp VIRGULA sigParams .

    RPAREN          reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    PLUS            reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    BREAKLINE       reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    DEF             reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    ID              reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    VIRGULA         reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    THEN            reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)
    DO              reduce using rule 34 (sigParams -> exp VIRGULA sigParams .)


state 52

    (15) stm -> WHILE LPAREN exp . RPAREN BREAKLINE body
    (25) exp -> exp . PLUS exp

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 32


state 53

    (16) stm -> WHILE exp BREAKLINE . body
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 62
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 54

    (17) stm -> FOR ID IN . exp DO BREAKLINE body
    (18) stm -> FOR ID IN . exp BREAKLINE body
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 63
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 55

    (19) stm -> IF exp THEN . BREAKLINE body opcional

    BREAKLINE       shift and go to state 64


state 56

    (20) stm -> IF exp BREAKLINE . body opcional
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 65
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 57

    (21) stm -> IF LPAREN exp . RPAREN THEN BREAKLINE body opcional
    (22) stm -> IF LPAREN exp . RPAREN BREAKLINE body opcional
    (25) exp -> exp . PLUS exp

    RPAREN          shift and go to state 66
    PLUS            shift and go to state 32


state 58

    (23) stm -> RETURN exp BREAKLINE .

    WHILE           reduce using rule 23 (stm -> RETURN exp BREAKLINE .)
    FOR             reduce using rule 23 (stm -> RETURN exp BREAKLINE .)
    IF              reduce using rule 23 (stm -> RETURN exp BREAKLINE .)
    RETURN          reduce using rule 23 (stm -> RETURN exp BREAKLINE .)
    NUMBER          reduce using rule 23 (stm -> RETURN exp BREAKLINE .)
    ID              reduce using rule 23 (stm -> RETURN exp BREAKLINE .)
    END             reduce using rule 23 (stm -> RETURN exp BREAKLINE .)


state 59

    (29) call -> ID LPAREN sigParams RPAREN .

    PLUS            reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    BREAKLINE       reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    DEF             reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    ID              reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    VIRGULA         reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    RPAREN          reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    THEN            reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)
    DO              reduce using rule 29 (call -> ID LPAREN sigParams RPAREN .)


state 60

    (5) funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE body .

    DEF             reduce using rule 5 (funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE body .)
    ID              reduce using rule 5 (funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE body .)
    $end            reduce using rule 5 (funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE body .)


state 61

    (15) stm -> WHILE LPAREN exp RPAREN . BREAKLINE body

    BREAKLINE       shift and go to state 67


state 62

    (16) stm -> WHILE exp BREAKLINE body .

    WHILE           reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)
    FOR             reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)
    IF              reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)
    RETURN          reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)
    NUMBER          reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)
    ID              reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)
    END             reduce using rule 16 (stm -> WHILE exp BREAKLINE body .)


state 63

    (17) stm -> FOR ID IN exp . DO BREAKLINE body
    (18) stm -> FOR ID IN exp . BREAKLINE body
    (25) exp -> exp . PLUS exp

    DO              shift and go to state 68
    BREAKLINE       shift and go to state 69
    PLUS            shift and go to state 32


state 64

    (19) stm -> IF exp THEN BREAKLINE . body opcional
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 70
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 65

    (20) stm -> IF exp BREAKLINE body . opcional
    (9) opcional -> . ELSIF exp THEN body
    (10) opcional -> . ELSE stms END
    (11) opcional -> .
    (12) opcional -> . ELSIF exp THEN body opcional

    ELSIF           shift and go to state 72
    ELSE            shift and go to state 73
    WHILE           reduce using rule 11 (opcional -> .)
    FOR             reduce using rule 11 (opcional -> .)
    IF              reduce using rule 11 (opcional -> .)
    RETURN          reduce using rule 11 (opcional -> .)
    NUMBER          reduce using rule 11 (opcional -> .)
    ID              reduce using rule 11 (opcional -> .)
    END             reduce using rule 11 (opcional -> .)

    opcional                       shift and go to state 71

state 66

    (21) stm -> IF LPAREN exp RPAREN . THEN BREAKLINE body opcional
    (22) stm -> IF LPAREN exp RPAREN . BREAKLINE body opcional

    THEN            shift and go to state 74
    BREAKLINE       shift and go to state 75


state 67

    (15) stm -> WHILE LPAREN exp RPAREN BREAKLINE . body
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 76
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 68

    (17) stm -> FOR ID IN exp DO . BREAKLINE body

    BREAKLINE       shift and go to state 77


state 69

    (18) stm -> FOR ID IN exp BREAKLINE . body
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 78
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 70

    (19) stm -> IF exp THEN BREAKLINE body . opcional
    (9) opcional -> . ELSIF exp THEN body
    (10) opcional -> . ELSE stms END
    (11) opcional -> .
    (12) opcional -> . ELSIF exp THEN body opcional

    ELSIF           shift and go to state 72
    ELSE            shift and go to state 73
    WHILE           reduce using rule 11 (opcional -> .)
    FOR             reduce using rule 11 (opcional -> .)
    IF              reduce using rule 11 (opcional -> .)
    RETURN          reduce using rule 11 (opcional -> .)
    NUMBER          reduce using rule 11 (opcional -> .)
    ID              reduce using rule 11 (opcional -> .)
    END             reduce using rule 11 (opcional -> .)

    opcional                       shift and go to state 79

state 71

    (20) stm -> IF exp BREAKLINE body opcional .

    WHILE           reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)
    FOR             reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)
    IF              reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)
    RETURN          reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)
    NUMBER          reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)
    ID              reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)
    END             reduce using rule 20 (stm -> IF exp BREAKLINE body opcional .)


state 72

    (9) opcional -> ELSIF . exp THEN body
    (12) opcional -> ELSIF . exp THEN body opcional
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE

    NUMBER          shift and go to state 17
    ID              shift and go to state 13

    exp                            shift and go to state 80
    call                           shift and go to state 15
    assign                         shift and go to state 16

state 73

    (10) opcional -> ELSE . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    stms                           shift and go to state 81
    stm                            shift and go to state 23
    exp                            shift and go to state 24
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 74

    (21) stm -> IF LPAREN exp RPAREN THEN . BREAKLINE body opcional

    BREAKLINE       shift and go to state 82


state 75

    (22) stm -> IF LPAREN exp RPAREN BREAKLINE . body opcional
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 83
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 76

    (15) stm -> WHILE LPAREN exp RPAREN BREAKLINE body .

    WHILE           reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)
    FOR             reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)
    IF              reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)
    RETURN          reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)
    NUMBER          reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)
    ID              reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)
    END             reduce using rule 15 (stm -> WHILE LPAREN exp RPAREN BREAKLINE body .)


state 77

    (17) stm -> FOR ID IN exp DO BREAKLINE . body
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 84
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 78

    (18) stm -> FOR ID IN exp BREAKLINE body .

    WHILE           reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)
    FOR             reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)
    IF              reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)
    RETURN          reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)
    NUMBER          reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)
    ID              reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)
    END             reduce using rule 18 (stm -> FOR ID IN exp BREAKLINE body .)


state 79

    (19) stm -> IF exp THEN BREAKLINE body opcional .

    WHILE           reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)
    FOR             reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)
    IF              reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)
    RETURN          reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)
    NUMBER          reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)
    ID              reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)
    END             reduce using rule 19 (stm -> IF exp THEN BREAKLINE body opcional .)


state 80

    (9) opcional -> ELSIF exp . THEN body
    (12) opcional -> ELSIF exp . THEN body opcional
    (25) exp -> exp . PLUS exp

    THEN            shift and go to state 85
    PLUS            shift and go to state 32


state 81

    (10) opcional -> ELSE stms . END

    END             shift and go to state 86


state 82

    (21) stm -> IF LPAREN exp RPAREN THEN BREAKLINE . body opcional
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 87
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 83

    (22) stm -> IF LPAREN exp RPAREN BREAKLINE body . opcional
    (9) opcional -> . ELSIF exp THEN body
    (10) opcional -> . ELSE stms END
    (11) opcional -> .
    (12) opcional -> . ELSIF exp THEN body opcional

    ELSIF           shift and go to state 72
    ELSE            shift and go to state 73
    WHILE           reduce using rule 11 (opcional -> .)
    FOR             reduce using rule 11 (opcional -> .)
    IF              reduce using rule 11 (opcional -> .)
    RETURN          reduce using rule 11 (opcional -> .)
    NUMBER          reduce using rule 11 (opcional -> .)
    ID              reduce using rule 11 (opcional -> .)
    END             reduce using rule 11 (opcional -> .)

    opcional                       shift and go to state 88

state 84

    (17) stm -> FOR ID IN exp DO BREAKLINE body .

    WHILE           reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)
    FOR             reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)
    IF              reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)
    RETURN          reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)
    NUMBER          reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)
    ID              reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)
    END             reduce using rule 17 (stm -> FOR ID IN exp DO BREAKLINE body .)


state 85

    (9) opcional -> ELSIF exp THEN . body
    (12) opcional -> ELSIF exp THEN . body opcional
    (13) body -> . stms END
    (7) stms -> . stm
    (8) stms -> . stm stms
    (14) stm -> . exp BREAKLINE
    (15) stm -> . WHILE LPAREN exp RPAREN BREAKLINE body
    (16) stm -> . WHILE exp BREAKLINE body
    (17) stm -> . FOR ID IN exp DO BREAKLINE body
    (18) stm -> . FOR ID IN exp BREAKLINE body
    (19) stm -> . IF exp THEN BREAKLINE body opcional
    (20) stm -> . IF exp BREAKLINE body opcional
    (21) stm -> . IF LPAREN exp RPAREN THEN BREAKLINE body opcional
    (22) stm -> . IF LPAREN exp RPAREN BREAKLINE body opcional
    (23) stm -> . RETURN exp BREAKLINE
    (24) stm -> . RETURN BREAKLINE
    (37) stm -> . assign BREAKLINE
    (25) exp -> . exp PLUS exp
    (26) exp -> . call
    (27) exp -> . assign
    (28) exp -> . NUMBER
    (35) assign -> . ID EQUAL exp
    (36) assign -> . assign BREAKLINE
    (29) call -> . ID LPAREN sigParams RPAREN
    (30) call -> . ID LPAREN RPAREN
    (31) call -> . ID
    (32) call -> . ID sigParams

    WHILE           shift and go to state 25
    FOR             shift and go to state 26
    IF              shift and go to state 27
    RETURN          shift and go to state 28
    NUMBER          shift and go to state 17
    ID              shift and go to state 20

    exp                            shift and go to state 24
    body                           shift and go to state 89
    stms                           shift and go to state 22
    stm                            shift and go to state 23
    assign                         shift and go to state 29
    call                           shift and go to state 15

state 86

    (10) opcional -> ELSE stms END .

    WHILE           reduce using rule 10 (opcional -> ELSE stms END .)
    FOR             reduce using rule 10 (opcional -> ELSE stms END .)
    IF              reduce using rule 10 (opcional -> ELSE stms END .)
    RETURN          reduce using rule 10 (opcional -> ELSE stms END .)
    NUMBER          reduce using rule 10 (opcional -> ELSE stms END .)
    ID              reduce using rule 10 (opcional -> ELSE stms END .)
    END             reduce using rule 10 (opcional -> ELSE stms END .)


state 87

    (21) stm -> IF LPAREN exp RPAREN THEN BREAKLINE body . opcional
    (9) opcional -> . ELSIF exp THEN body
    (10) opcional -> . ELSE stms END
    (11) opcional -> .
    (12) opcional -> . ELSIF exp THEN body opcional

    ELSIF           shift and go to state 72
    ELSE            shift and go to state 73
    WHILE           reduce using rule 11 (opcional -> .)
    FOR             reduce using rule 11 (opcional -> .)
    IF              reduce using rule 11 (opcional -> .)
    RETURN          reduce using rule 11 (opcional -> .)
    NUMBER          reduce using rule 11 (opcional -> .)
    ID              reduce using rule 11 (opcional -> .)
    END             reduce using rule 11 (opcional -> .)

    opcional                       shift and go to state 90

state 88

    (22) stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .

    WHILE           reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)
    FOR             reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)
    IF              reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)
    RETURN          reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)
    NUMBER          reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)
    ID              reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)
    END             reduce using rule 22 (stm -> IF LPAREN exp RPAREN BREAKLINE body opcional .)


state 89

    (9) opcional -> ELSIF exp THEN body .
    (12) opcional -> ELSIF exp THEN body . opcional
    (9) opcional -> . ELSIF exp THEN body
    (10) opcional -> . ELSE stms END
    (11) opcional -> .
    (12) opcional -> . ELSIF exp THEN body opcional

  ! reduce/reduce conflict for WHILE resolved using rule 9 (opcional -> ELSIF exp THEN body .)
  ! reduce/reduce conflict for FOR resolved using rule 9 (opcional -> ELSIF exp THEN body .)
  ! reduce/reduce conflict for IF resolved using rule 9 (opcional -> ELSIF exp THEN body .)
  ! reduce/reduce conflict for RETURN resolved using rule 9 (opcional -> ELSIF exp THEN body .)
  ! reduce/reduce conflict for NUMBER resolved using rule 9 (opcional -> ELSIF exp THEN body .)
  ! reduce/reduce conflict for ID resolved using rule 9 (opcional -> ELSIF exp THEN body .)
  ! reduce/reduce conflict for END resolved using rule 9 (opcional -> ELSIF exp THEN body .)
    WHILE           reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    FOR             reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    IF              reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    RETURN          reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    NUMBER          reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    ID              reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    END             reduce using rule 9 (opcional -> ELSIF exp THEN body .)
    ELSIF           shift and go to state 72
    ELSE            shift and go to state 73

  ! WHILE           [ reduce using rule 11 (opcional -> .) ]
  ! FOR             [ reduce using rule 11 (opcional -> .) ]
  ! IF              [ reduce using rule 11 (opcional -> .) ]
  ! RETURN          [ reduce using rule 11 (opcional -> .) ]
  ! NUMBER          [ reduce using rule 11 (opcional -> .) ]
  ! ID              [ reduce using rule 11 (opcional -> .) ]
  ! END             [ reduce using rule 11 (opcional -> .) ]

    opcional                       shift and go to state 91

state 90

    (21) stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .

    WHILE           reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)
    FOR             reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)
    IF              reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)
    RETURN          reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)
    NUMBER          reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)
    ID              reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)
    END             reduce using rule 21 (stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional .)


state 91

    (12) opcional -> ELSIF exp THEN body opcional .

    WHILE           reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)
    FOR             reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)
    IF              reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)
    RETURN          reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)
    NUMBER          reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)
    ID              reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)
    END             reduce using rule 12 (opcional -> ELSIF exp THEN body opcional .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for BREAKLINE in state 16 resolved as shift
WARNING: shift/reduce conflict for VIRGULA in state 19 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 19 resolved as shift
WARNING: shift/reduce conflict for BREAKLINE in state 29 resolved as shift
WARNING: reduce/reduce conflict in state 89 resolved using rule (opcional -> ELSIF exp THEN body)
WARNING: rejected rule (opcional -> <empty>) in state 89
