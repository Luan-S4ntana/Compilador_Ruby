
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORANDleftDIFFDOUBLEEQUALTRIPLEEQUALEQUALleftBIGGESTEQUALBIGGESTSMALLSMALLEQUALleftPLUSMINUSleftTIMESDIVIDERESTleftEXPONENleftIDAND BEGIN BIGGEST BIGGESTEQUAL BIGSMALLERESQUAL BREAK BREAKLINE CLASS CLOSEKEY COMMENT DEDENT DEF DIFF DIVIDE DO DOUBLEBAR DOUBLEE DOUBLEEQUAL ELSE ELSIF END EQUAL EXCLAMATION EXPONEN FALSE FOR ID IDENT IF IN LINHA LPAREN LSHIFT MINUS MODULE NIL NOT NUMBER OPENKEY OR PLUS PONTO PONTOEVIRGULA REST RETURN RPAREN RSHIFT SELF SIMPLEBAR SIMPLEE SMALL SMALLEQUAL SUPER THEN TIMES TRIPLEEQUAL TRUE VIRGULA WHILEprogram : funcao programprogram : assign programprogram : assign BREAKLINEprogram : funcaofuncao : DEF ID LPAREN sigParams RPAREN BREAKLINE bodyfuncao : DEF ID BREAKLINE bodystms : stm  \n          |  stm stmsopcional : ELSIF exp THEN body  \n              | ELSE stms END \n              | \n              | ELSIF exp THEN body opcionalbody : stms ENDstm : exp BREAKLINE \n        |   WHILE LPAREN exp RPAREN BREAKLINE body\n  stm : WHILE exp BREAKLINE bodystm : FOR ID IN exp DO BREAKLINE bodystm : FOR ID IN exp BREAKLINE bodystm : IF exp THEN BREAKLINE body opcionalstm : IF exp BREAKLINE body opcionalstm : IF LPAREN exp RPAREN THEN BREAKLINE body opcionalstm : IF LPAREN exp RPAREN BREAKLINE body opcionalstm : RETURN exp BREAKLINEstm : RETURN BREAKLINEexp : exp PLUS expexp : callexp : assignexp : NUMBERcall : ID LPAREN sigParams RPARENcall : ID LPAREN RPARENcall : IDcall : ID sigParamssigParams :  expsigParams :  exp VIRGULA sigParamsassign : ID EQUAL expassign : assign BREAKLINEstm : assign BREAKLINE'
    
_lr_action_items = {'DEF':([0,2,3,8,13,14,15,16,17,19,21,31,33,36,48,49,51,59,60,],[4,4,4,-36,-31,-35,-26,-27,-28,-33,-6,-32,-36,-13,-30,-25,-34,-29,-5,]),'ID':([0,2,3,4,8,10,11,12,13,14,15,16,17,19,20,21,23,25,26,27,28,30,31,32,33,35,36,38,39,43,45,46,48,49,50,51,53,54,56,58,59,60,62,64,65,67,69,70,71,72,73,75,76,77,78,79,82,83,84,85,86,87,88,89,90,91,],[5,5,5,9,-36,13,13,20,-31,-35,-26,-27,-28,-33,13,-6,20,13,41,13,13,13,-32,13,-36,13,-13,-14,13,13,-24,-37,-30,-25,20,-34,20,13,20,-23,-29,-5,-16,20,-11,20,20,-11,-20,13,20,20,-15,20,-18,-19,20,-11,-17,20,-10,-11,-22,-9,-21,-12,]),'$end':([1,2,6,7,8,21,36,60,],[0,-4,-1,-2,-3,-6,-13,-5,]),'BREAKLINE':([3,8,9,13,14,15,16,17,19,20,24,28,29,31,33,34,40,42,44,46,48,49,51,55,59,61,63,66,68,74,],[8,-36,12,-31,-35,-26,33,-28,-33,-31,38,45,46,-32,-36,50,53,56,58,-36,-30,-25,-34,64,-29,67,69,75,77,82,]),'EQUAL':([5,13,20,],[10,10,10,]),'LPAREN':([9,13,20,25,27,],[11,30,30,39,43,]),'NUMBER':([10,11,12,13,20,23,25,27,28,30,32,35,36,38,39,43,45,46,50,53,54,56,58,62,64,65,67,69,70,71,72,73,75,76,77,78,79,82,83,84,85,86,87,88,89,90,91,],[17,17,17,17,17,17,17,17,17,17,17,17,-13,-14,17,17,-24,-37,17,17,17,17,-23,-16,17,-11,17,17,-11,-20,17,17,17,-15,17,-18,-19,17,-11,-17,17,-10,-11,-22,-9,-21,-12,]),'WHILE':([12,23,36,38,45,46,50,53,56,58,62,64,65,67,69,70,71,73,75,76,77,78,79,82,83,84,85,86,87,88,89,90,91,],[25,25,-13,-14,-24,-37,25,25,25,-23,-16,25,-11,25,25,-11,-20,25,25,-15,25,-18,-19,25,-11,-17,25,-10,-11,-22,-9,-21,-12,]),'FOR':([12,23,36,38,45,46,50,53,56,58,62,64,65,67,69,70,71,73,75,76,77,78,79,82,83,84,85,86,87,88,89,90,91,],[26,26,-13,-14,-24,-37,26,26,26,-23,-16,26,-11,26,26,-11,-20,26,26,-15,26,-18,-19,26,-11,-17,26,-10,-11,-22,-9,-21,-12,]),'IF':([12,23,36,38,45,46,50,53,56,58,62,64,65,67,69,70,71,73,75,76,77,78,79,82,83,84,85,86,87,88,89,90,91,],[27,27,-13,-14,-24,-37,27,27,27,-23,-16,27,-11,27,27,-11,-20,27,27,-15,27,-18,-19,27,-11,-17,27,-10,-11,-22,-9,-21,-12,]),'RETURN':([12,23,36,38,45,46,50,53,56,58,62,64,65,67,69,70,71,73,75,76,77,78,79,82,83,84,85,86,87,88,89,90,91,],[28,28,-13,-14,-24,-37,28,28,28,-23,-16,28,-11,28,28,-11,-20,28,28,-15,28,-18,-19,28,-11,-17,28,-10,-11,-22,-9,-21,-12,]),'PLUS':([13,14,15,16,17,19,20,24,29,31,33,40,42,44,46,48,49,51,52,57,59,63,80,],[-31,32,-26,-27,-28,32,-31,32,-27,-32,-36,32,32,32,-36,-30,-25,-34,32,32,-29,32,32,]),'VIRGULA':([13,14,15,16,17,19,31,33,48,49,51,59,],[-31,-35,-26,-27,-28,35,-32,-36,-30,-25,-34,-29,]),'RPAREN':([13,14,15,16,17,18,19,30,31,33,47,48,49,51,52,57,59,],[-31,-35,-26,-27,-28,34,-33,48,-32,-36,59,-30,-25,-34,61,66,-29,]),'THEN':([13,14,15,16,17,19,31,33,42,48,49,51,59,66,80,],[-31,-35,-26,-27,-28,-33,-32,-36,55,-30,-25,-34,-29,74,85,]),'DO':([13,14,15,16,17,19,31,33,48,49,51,59,63,],[-31,-35,-26,-27,-28,-33,-32,-36,-30,-25,-34,-29,68,]),'END':([22,23,36,37,38,45,46,58,62,65,70,71,76,78,79,81,83,84,86,87,88,89,90,91,],[36,-7,-13,-8,-14,-24,-37,-23,-16,-11,-11,-20,-15,-18,-19,86,-11,-17,-10,-11,-22,-9,-21,-12,]),'ELSIF':([36,65,70,83,87,89,],[-13,72,72,72,72,72,]),'ELSE':([36,65,70,83,87,89,],[-13,73,73,73,73,73,]),'IN':([41,],[54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,3,],[1,6,7,]),'funcao':([0,2,3,],[2,2,2,]),'assign':([0,2,3,10,11,12,13,20,23,25,27,28,30,32,35,39,43,50,53,54,56,64,67,69,72,73,75,77,82,85,],[3,3,3,16,16,29,16,16,29,16,16,16,16,16,16,16,16,29,29,16,29,29,29,29,16,29,29,29,29,29,]),'exp':([10,11,12,13,20,23,25,27,28,30,32,35,39,43,50,53,54,56,64,67,69,72,73,75,77,82,85,],[14,19,24,19,19,24,40,42,44,19,49,19,52,57,24,24,63,24,24,24,24,80,24,24,24,24,24,]),'call':([10,11,12,13,20,23,25,27,28,30,32,35,39,43,50,53,54,56,64,67,69,72,73,75,77,82,85,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'sigParams':([11,13,20,30,35,],[18,31,31,47,51,]),'body':([12,50,53,56,64,67,69,75,77,82,85,],[21,60,62,65,70,76,78,83,84,87,89,]),'stms':([12,23,50,53,56,64,67,69,73,75,77,82,85,],[22,37,22,22,22,22,22,22,81,22,22,22,22,]),'stm':([12,23,50,53,56,64,67,69,73,75,77,82,85,],[23,23,23,23,23,23,23,23,23,23,23,23,23,]),'opcional':([65,70,83,87,89,],[71,79,88,90,91,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> funcao program','program',2,'p_program','sintatico.py',16),
  ('program -> assign program','program',2,'p_program_assignProgram','sintatico.py',20),
  ('program -> assign BREAKLINE','program',2,'p_program_assign','sintatico.py',24),
  ('program -> funcao','program',1,'p_program_func','sintatico.py',28),
  ('funcao -> DEF ID LPAREN sigParams RPAREN BREAKLINE body','funcao',7,'p_funcao','sintatico.py',32),
  ('funcao -> DEF ID BREAKLINE body','funcao',4,'p_funcao2','sintatico.py',36),
  ('stms -> stm','stms',1,'p_stms','sintatico.py',40),
  ('stms -> stm stms','stms',2,'p_stms','sintatico.py',41),
  ('opcional -> ELSIF exp THEN body','opcional',4,'p_opcional','sintatico.py',48),
  ('opcional -> ELSE stms END','opcional',3,'p_opcional','sintatico.py',49),
  ('opcional -> <empty>','opcional',0,'p_opcional','sintatico.py',50),
  ('opcional -> ELSIF exp THEN body opcional','opcional',5,'p_opcional','sintatico.py',51),
  ('body -> stms END','body',2,'p_body','sintatico.py',62),
  ('stm -> exp BREAKLINE','stm',2,'p_stms_while1','sintatico.py',66),
  ('stm -> WHILE LPAREN exp RPAREN BREAKLINE body','stm',6,'p_stms_while1','sintatico.py',67),
  ('stm -> WHILE exp BREAKLINE body','stm',4,'p_stms_while2','sintatico.py',76),
  ('stm -> FOR ID IN exp DO BREAKLINE body','stm',7,'p_stms_for1','sintatico.py',80),
  ('stm -> FOR ID IN exp BREAKLINE body','stm',6,'p_stms_for2','sintatico.py',84),
  ('stm -> IF exp THEN BREAKLINE body opcional','stm',6,'p_stms_if1','sintatico.py',88),
  ('stm -> IF exp BREAKLINE body opcional','stm',5,'p_smts_if2','sintatico.py',92),
  ('stm -> IF LPAREN exp RPAREN THEN BREAKLINE body opcional','stm',8,'p_stms_if3','sintatico.py',96),
  ('stm -> IF LPAREN exp RPAREN BREAKLINE body opcional','stm',7,'p_stms_if4','sintatico.py',100),
  ('stm -> RETURN exp BREAKLINE','stm',3,'p_stms_return','sintatico.py',104),
  ('stm -> RETURN BREAKLINE','stm',2,'p_stms_return2','sintatico.py',108),
  ('exp -> exp PLUS exp','exp',3,'p_exp_soma','sintatico.py',113),
  ('exp -> call','exp',1,'p_exp_call','sintatico.py',173),
  ('exp -> assign','exp',1,'p_exp_assign','sintatico.py',177),
  ('exp -> NUMBER','exp',1,'p_expNum','sintatico.py',181),
  ('call -> ID LPAREN sigParams RPAREN','call',4,'p_call_complete','sintatico.py',185),
  ('call -> ID LPAREN RPAREN','call',3,'p_call_without_param','sintatico.py',189),
  ('call -> ID','call',1,'p_call_only_id','sintatico.py',193),
  ('call -> ID sigParams','call',2,'p_call_only_id_param','sintatico.py',197),
  ('sigParams -> exp','sigParams',1,'p_sigparams','sintatico.py',201),
  ('sigParams -> exp VIRGULA sigParams','sigParams',3,'p_sigparams1','sintatico.py',205),
  ('assign -> ID EQUAL exp','assign',3,'p_assign','sintatico.py',209),
  ('assign -> assign BREAKLINE','assign',2,'p_assignComand','sintatico.py',213),
  ('stm -> assign BREAKLINE','stm',2,'p_assign_break','sintatico.py',217),
]
